plugins {
    id 'java'
    id "jacoco"
    id "org.sonarqube" version "2.8"
    id "org.owasp.dependencycheck" version "5.3.2"
}

apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

sourceCompatibility = 1.8

def sparkVersion = "2.4.4"
def scalaVersion = "2.11"

group ''
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    runtimeOnly
}

dependencies {
//   Spark related dependencies
    runtimeOnly "org.apache.spark:spark-core_$scalaVersion:$sparkVersion"
    implementation "org.apache.spark:spark-sql_$scalaVersion:$sparkVersion"
    implementation "org.apache.spark:spark-streaming-kafka-0-10_$scalaVersion:$sparkVersion"
    runtimeOnly "org.apache.spark:spark-streaming_$scalaVersion:$sparkVersion"
    runtimeOnly "org.apache.spark:spark-sql-kafka-0-10_$scalaVersion:$sparkVersion"

//  Do not upgrade to newer due to spark built with hadoop 2.7
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.6.7'
    implementation(group: 'org.apache.hadoop', name: 'hadoop-aws', version: '2.7.5') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.11'
//  Do not upgrade to newer due to spark built with hadoop 2.7

    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.7'
    implementation group: 'com.google.guava', name: 'guava', version: '28.1-jre'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.8'

//    Testing related dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testCompileOnly 'junit:junit:4.12'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.3.1'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'com.holdenkarau', name: 'spark-testing-base_2.11', version: '2.4.4_0.14.0'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.4'
}

jar {
    zip64 true
    manifest {
        attributes "Main-Class": "com.poc.spark.etl.AppRunner"
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

task buildWithSonarQube {
    dependsOn 'build'
    dependsOn 'jacocoTestReport'
    dependsOn 'sonarqube'
}
sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.coveragePlugin", "jacoco"
        property 'sonar.exclusions', "**/model/**"
    }
}

task applicationCodeCoverageReport(type: JacocoReport) {
    sourceSets sourceSets.main
}


